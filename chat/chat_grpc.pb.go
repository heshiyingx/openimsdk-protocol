// Copyright © 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: pkg/proto/chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chat_UpdateUserInfo_FullMethodName          = "/OpenIMChat.chat.chat/UpdateUserInfo"
	Chat_SearchUserPublicInfo_FullMethodName    = "/OpenIMChat.chat.chat/SearchUserPublicInfo"
	Chat_FindUserPublicInfo_FullMethodName      = "/OpenIMChat.chat.chat/FindUserPublicInfo"
	Chat_SearchUserFullInfo_FullMethodName      = "/OpenIMChat.chat.chat/SearchUserFullInfo"
	Chat_FindUserFullInfo_FullMethodName        = "/OpenIMChat.chat.chat/FindUserFullInfo"
	Chat_SendVerifyCode_FullMethodName          = "/OpenIMChat.chat.chat/SendVerifyCode"
	Chat_VerifyCode_FullMethodName              = "/OpenIMChat.chat.chat/VerifyCode"
	Chat_RegisterUser_FullMethodName            = "/OpenIMChat.chat.chat/RegisterUser"
	Chat_Login_FullMethodName                   = "/OpenIMChat.chat.chat/Login"
	Chat_ResetPassword_FullMethodName           = "/OpenIMChat.chat.chat/ResetPassword"
	Chat_ChangePassword_FullMethodName          = "/OpenIMChat.chat.chat/ChangePassword"
	Chat_FindUserAccount_FullMethodName         = "/OpenIMChat.chat.chat/FindUserAccount"
	Chat_FindAccountUser_FullMethodName         = "/OpenIMChat.chat.chat/FindAccountUser"
	Chat_AddSignalRecord_FullMethodName         = "/OpenIMChat.chat.chat/AddSignalRecord"
	Chat_GetSignalRecords_FullMethodName        = "/OpenIMChat.chat.chat/GetSignalRecords"
	Chat_OpenIMCallback_FullMethodName          = "/OpenIMChat.chat.chat/OpenIMCallback"
	Chat_UserLoginCount_FullMethodName          = "/OpenIMChat.chat.chat/UserLoginCount"
	Chat_UploadLogs_FullMethodName              = "/OpenIMChat.chat.chat/UploadLogs"
	Chat_DeleteLogs_FullMethodName              = "/OpenIMChat.chat.chat/DeleteLogs"
	Chat_SearchLogs_FullMethodName              = "/OpenIMChat.chat.chat/SearchLogs"
	Chat_SearchUserInfo_FullMethodName          = "/OpenIMChat.chat.chat/SearchUserInfo"
	Chat_CreateUser_FullMethodName              = "/OpenIMChat.chat.chat/CreateUser"
	Chat_UpdateOfflinePlatformID_FullMethodName = "/OpenIMChat.chat.chat/UpdateOfflinePlatformID"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// 编辑个人资料 自己或者管理员调用
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	// 获取用户的公开信息   陌生人调用
	SearchUserPublicInfo(ctx context.Context, in *SearchUserPublicInfoReq, opts ...grpc.CallOption) (*SearchUserPublicInfoResp, error)
	FindUserPublicInfo(ctx context.Context, in *FindUserPublicInfoReq, opts ...grpc.CallOption) (*FindUserPublicInfoResp, error)
	// 搜索用户信息 管理员调用 其他用户调用时返回public字段
	SearchUserFullInfo(ctx context.Context, in *SearchUserFullInfoReq, opts ...grpc.CallOption) (*SearchUserFullInfoResp, error)
	FindUserFullInfo(ctx context.Context, in *FindUserFullInfoReq, opts ...grpc.CallOption) (*FindUserFullInfoResp, error)
	SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...grpc.CallOption) (*SendVerifyCodeResp, error)
	VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error)
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	FindUserAccount(ctx context.Context, in *FindUserAccountReq, opts ...grpc.CallOption) (*FindUserAccountResp, error)
	FindAccountUser(ctx context.Context, in *FindAccountUserReq, opts ...grpc.CallOption) (*FindAccountUserResp, error)
	AddSignalRecord(ctx context.Context, in *AddSignalRecordReq, opts ...grpc.CallOption) (*AddSignalRecordResp, error)
	GetSignalRecords(ctx context.Context, in *GetSignalRecordsReq, opts ...grpc.CallOption) (*GetSignalRecordsResp, error)
	OpenIMCallback(ctx context.Context, in *OpenIMCallbackReq, opts ...grpc.CallOption) (*OpenIMCallbackResp, error)
	// 统计
	UserLoginCount(ctx context.Context, in *UserLoginCountReq, opts ...grpc.CallOption) (*UserLoginCountResp, error)
	// 日志
	UploadLogs(ctx context.Context, in *UploadLogsReq, opts ...grpc.CallOption) (*UploadLogsResp, error)
	DeleteLogs(ctx context.Context, in *DeleteLogsReq, opts ...grpc.CallOption) (*DeleteLogsResp, error)
	SearchLogs(ctx context.Context, in *SearchLogsReq, opts ...grpc.CallOption) (*SearchLogsResp, error)
	SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error)
	CreateUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error)
	// 更新最后离线平台
	UpdateOfflinePlatformID(ctx context.Context, in *UpdateOfflinePlatformIDReq, opts ...grpc.CallOption) (*UpdateOfflinePlatformIDResp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, Chat_UpdateUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserPublicInfo(ctx context.Context, in *SearchUserPublicInfoReq, opts ...grpc.CallOption) (*SearchUserPublicInfoResp, error) {
	out := new(SearchUserPublicInfoResp)
	err := c.cc.Invoke(ctx, Chat_SearchUserPublicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserPublicInfo(ctx context.Context, in *FindUserPublicInfoReq, opts ...grpc.CallOption) (*FindUserPublicInfoResp, error) {
	out := new(FindUserPublicInfoResp)
	err := c.cc.Invoke(ctx, Chat_FindUserPublicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserFullInfo(ctx context.Context, in *SearchUserFullInfoReq, opts ...grpc.CallOption) (*SearchUserFullInfoResp, error) {
	out := new(SearchUserFullInfoResp)
	err := c.cc.Invoke(ctx, Chat_SearchUserFullInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserFullInfo(ctx context.Context, in *FindUserFullInfoReq, opts ...grpc.CallOption) (*FindUserFullInfoResp, error) {
	out := new(FindUserFullInfoResp)
	err := c.cc.Invoke(ctx, Chat_FindUserFullInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...grpc.CallOption) (*SendVerifyCodeResp, error) {
	out := new(SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, Chat_SendVerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error) {
	out := new(VerifyCodeResp)
	err := c.cc.Invoke(ctx, Chat_VerifyCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error) {
	out := new(RegisterUserResp)
	err := c.cc.Invoke(ctx, Chat_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Chat_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	out := new(ResetPasswordResp)
	err := c.cc.Invoke(ctx, Chat_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, Chat_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserAccount(ctx context.Context, in *FindUserAccountReq, opts ...grpc.CallOption) (*FindUserAccountResp, error) {
	out := new(FindUserAccountResp)
	err := c.cc.Invoke(ctx, Chat_FindUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindAccountUser(ctx context.Context, in *FindAccountUserReq, opts ...grpc.CallOption) (*FindAccountUserResp, error) {
	out := new(FindAccountUserResp)
	err := c.cc.Invoke(ctx, Chat_FindAccountUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddSignalRecord(ctx context.Context, in *AddSignalRecordReq, opts ...grpc.CallOption) (*AddSignalRecordResp, error) {
	out := new(AddSignalRecordResp)
	err := c.cc.Invoke(ctx, Chat_AddSignalRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetSignalRecords(ctx context.Context, in *GetSignalRecordsReq, opts ...grpc.CallOption) (*GetSignalRecordsResp, error) {
	out := new(GetSignalRecordsResp)
	err := c.cc.Invoke(ctx, Chat_GetSignalRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) OpenIMCallback(ctx context.Context, in *OpenIMCallbackReq, opts ...grpc.CallOption) (*OpenIMCallbackResp, error) {
	out := new(OpenIMCallbackResp)
	err := c.cc.Invoke(ctx, Chat_OpenIMCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UserLoginCount(ctx context.Context, in *UserLoginCountReq, opts ...grpc.CallOption) (*UserLoginCountResp, error) {
	out := new(UserLoginCountResp)
	err := c.cc.Invoke(ctx, Chat_UserLoginCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UploadLogs(ctx context.Context, in *UploadLogsReq, opts ...grpc.CallOption) (*UploadLogsResp, error) {
	out := new(UploadLogsResp)
	err := c.cc.Invoke(ctx, Chat_UploadLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteLogs(ctx context.Context, in *DeleteLogsReq, opts ...grpc.CallOption) (*DeleteLogsResp, error) {
	out := new(DeleteLogsResp)
	err := c.cc.Invoke(ctx, Chat_DeleteLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchLogs(ctx context.Context, in *SearchLogsReq, opts ...grpc.CallOption) (*SearchLogsResp, error) {
	out := new(SearchLogsResp)
	err := c.cc.Invoke(ctx, Chat_SearchLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error) {
	out := new(SearchUserInfoResp)
	err := c.cc.Invoke(ctx, Chat_SearchUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CreateUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error) {
	out := new(RegisterUserResp)
	err := c.cc.Invoke(ctx, Chat_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UpdateOfflinePlatformID(ctx context.Context, in *UpdateOfflinePlatformIDReq, opts ...grpc.CallOption) (*UpdateOfflinePlatformIDResp, error) {
	out := new(UpdateOfflinePlatformIDResp)
	err := c.cc.Invoke(ctx, Chat_UpdateOfflinePlatformID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// 编辑个人资料 自己或者管理员调用
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	// 获取用户的公开信息   陌生人调用
	SearchUserPublicInfo(context.Context, *SearchUserPublicInfoReq) (*SearchUserPublicInfoResp, error)
	FindUserPublicInfo(context.Context, *FindUserPublicInfoReq) (*FindUserPublicInfoResp, error)
	// 搜索用户信息 管理员调用 其他用户调用时返回public字段
	SearchUserFullInfo(context.Context, *SearchUserFullInfoReq) (*SearchUserFullInfoResp, error)
	FindUserFullInfo(context.Context, *FindUserFullInfoReq) (*FindUserFullInfoResp, error)
	SendVerifyCode(context.Context, *SendVerifyCodeReq) (*SendVerifyCodeResp, error)
	VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error)
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	FindUserAccount(context.Context, *FindUserAccountReq) (*FindUserAccountResp, error)
	FindAccountUser(context.Context, *FindAccountUserReq) (*FindAccountUserResp, error)
	AddSignalRecord(context.Context, *AddSignalRecordReq) (*AddSignalRecordResp, error)
	GetSignalRecords(context.Context, *GetSignalRecordsReq) (*GetSignalRecordsResp, error)
	OpenIMCallback(context.Context, *OpenIMCallbackReq) (*OpenIMCallbackResp, error)
	// 统计
	UserLoginCount(context.Context, *UserLoginCountReq) (*UserLoginCountResp, error)
	// 日志
	UploadLogs(context.Context, *UploadLogsReq) (*UploadLogsResp, error)
	DeleteLogs(context.Context, *DeleteLogsReq) (*DeleteLogsResp, error)
	SearchLogs(context.Context, *SearchLogsReq) (*SearchLogsResp, error)
	SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error)
	CreateUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error)
	// 更新最后离线平台
	UpdateOfflinePlatformID(context.Context, *UpdateOfflinePlatformIDReq) (*UpdateOfflinePlatformIDResp, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (UnimplementedChatServer) SearchUserPublicInfo(context.Context, *SearchUserPublicInfoReq) (*SearchUserPublicInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserPublicInfo not implemented")
}
func (UnimplementedChatServer) FindUserPublicInfo(context.Context, *FindUserPublicInfoReq) (*FindUserPublicInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserPublicInfo not implemented")
}
func (UnimplementedChatServer) SearchUserFullInfo(context.Context, *SearchUserFullInfoReq) (*SearchUserFullInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserFullInfo not implemented")
}
func (UnimplementedChatServer) FindUserFullInfo(context.Context, *FindUserFullInfoReq) (*FindUserFullInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserFullInfo not implemented")
}
func (UnimplementedChatServer) SendVerifyCode(context.Context, *SendVerifyCodeReq) (*SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerifyCode not implemented")
}
func (UnimplementedChatServer) VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedChatServer) RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedChatServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedChatServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedChatServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedChatServer) FindUserAccount(context.Context, *FindUserAccountReq) (*FindUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserAccount not implemented")
}
func (UnimplementedChatServer) FindAccountUser(context.Context, *FindAccountUserReq) (*FindAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccountUser not implemented")
}
func (UnimplementedChatServer) AddSignalRecord(context.Context, *AddSignalRecordReq) (*AddSignalRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSignalRecord not implemented")
}
func (UnimplementedChatServer) GetSignalRecords(context.Context, *GetSignalRecordsReq) (*GetSignalRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignalRecords not implemented")
}
func (UnimplementedChatServer) OpenIMCallback(context.Context, *OpenIMCallbackReq) (*OpenIMCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenIMCallback not implemented")
}
func (UnimplementedChatServer) UserLoginCount(context.Context, *UserLoginCountReq) (*UserLoginCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginCount not implemented")
}
func (UnimplementedChatServer) UploadLogs(context.Context, *UploadLogsReq) (*UploadLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLogs not implemented")
}
func (UnimplementedChatServer) DeleteLogs(context.Context, *DeleteLogsReq) (*DeleteLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogs not implemented")
}
func (UnimplementedChatServer) SearchLogs(context.Context, *SearchLogsReq) (*SearchLogsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLogs not implemented")
}
func (UnimplementedChatServer) SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserInfo not implemented")
}
func (UnimplementedChatServer) CreateUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedChatServer) UpdateOfflinePlatformID(context.Context, *UpdateOfflinePlatformIDReq) (*UpdateOfflinePlatformIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOfflinePlatformID not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserPublicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserPublicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchUserPublicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserPublicInfo(ctx, req.(*SearchUserPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserPublicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserPublicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindUserPublicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserPublicInfo(ctx, req.(*FindUserPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserFullInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchUserFullInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserFullInfo(ctx, req.(*SearchUserFullInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserFullInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindUserFullInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserFullInfo(ctx, req.(*FindUserFullInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SendVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendVerifyCode(ctx, req.(*SendVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).VerifyCode(ctx, req.(*VerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserAccount(ctx, req.(*FindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_FindAccountUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindAccountUser(ctx, req.(*FindAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddSignalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSignalRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddSignalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_AddSignalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddSignalRecord(ctx, req.(*AddSignalRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetSignalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignalRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetSignalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_GetSignalRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetSignalRecords(ctx, req.(*GetSignalRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_OpenIMCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIMCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).OpenIMCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_OpenIMCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).OpenIMCallback(ctx, req.(*OpenIMCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UserLoginCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UserLoginCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UserLoginCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UserLoginCount(ctx, req.(*UserLoginCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UploadLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UploadLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UploadLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UploadLogs(ctx, req.(*UploadLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_DeleteLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteLogs(ctx, req.(*DeleteLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchLogs(ctx, req.(*SearchLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_SearchUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserInfo(ctx, req.(*SearchUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UpdateOfflinePlatformID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfflinePlatformIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateOfflinePlatformID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chat_UpdateOfflinePlatformID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateOfflinePlatformID(ctx, req.(*UpdateOfflinePlatformIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpenIMChat.chat.chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Chat_UpdateUserInfo_Handler,
		},
		{
			MethodName: "SearchUserPublicInfo",
			Handler:    _Chat_SearchUserPublicInfo_Handler,
		},
		{
			MethodName: "FindUserPublicInfo",
			Handler:    _Chat_FindUserPublicInfo_Handler,
		},
		{
			MethodName: "SearchUserFullInfo",
			Handler:    _Chat_SearchUserFullInfo_Handler,
		},
		{
			MethodName: "FindUserFullInfo",
			Handler:    _Chat_FindUserFullInfo_Handler,
		},
		{
			MethodName: "SendVerifyCode",
			Handler:    _Chat_SendVerifyCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _Chat_VerifyCode_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Chat_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Chat_Login_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Chat_ResetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Chat_ChangePassword_Handler,
		},
		{
			MethodName: "FindUserAccount",
			Handler:    _Chat_FindUserAccount_Handler,
		},
		{
			MethodName: "FindAccountUser",
			Handler:    _Chat_FindAccountUser_Handler,
		},
		{
			MethodName: "AddSignalRecord",
			Handler:    _Chat_AddSignalRecord_Handler,
		},
		{
			MethodName: "GetSignalRecords",
			Handler:    _Chat_GetSignalRecords_Handler,
		},
		{
			MethodName: "OpenIMCallback",
			Handler:    _Chat_OpenIMCallback_Handler,
		},
		{
			MethodName: "UserLoginCount",
			Handler:    _Chat_UserLoginCount_Handler,
		},
		{
			MethodName: "UploadLogs",
			Handler:    _Chat_UploadLogs_Handler,
		},
		{
			MethodName: "DeleteLogs",
			Handler:    _Chat_DeleteLogs_Handler,
		},
		{
			MethodName: "SearchLogs",
			Handler:    _Chat_SearchLogs_Handler,
		},
		{
			MethodName: "SearchUserInfo",
			Handler:    _Chat_SearchUserInfo_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Chat_CreateUser_Handler,
		},
		{
			MethodName: "UpdateOfflinePlatformID",
			Handler:    _Chat_UpdateOfflinePlatformID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/chat/chat.proto",
}
