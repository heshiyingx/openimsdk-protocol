// Copyright © 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: pkg/proto/admin/admin.proto

package chatadmin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Admin_Login_FullMethodName                  = "/OpenIMChat.admin.admin/Login"
	Admin_ChangePassword_FullMethodName         = "/OpenIMChat.admin.admin/ChangePassword"
	Admin_AdminUpdateInfo_FullMethodName        = "/OpenIMChat.admin.admin/AdminUpdateInfo"
	Admin_GetAdminInfo_FullMethodName           = "/OpenIMChat.admin.admin/GetAdminInfo"
	Admin_AddDefaultFriend_FullMethodName       = "/OpenIMChat.admin.admin/AddDefaultFriend"
	Admin_DelDefaultFriend_FullMethodName       = "/OpenIMChat.admin.admin/DelDefaultFriend"
	Admin_FindDefaultFriend_FullMethodName      = "/OpenIMChat.admin.admin/FindDefaultFriend"
	Admin_SearchDefaultFriend_FullMethodName    = "/OpenIMChat.admin.admin/SearchDefaultFriend"
	Admin_AddDefaultGroup_FullMethodName        = "/OpenIMChat.admin.admin/AddDefaultGroup"
	Admin_DelDefaultGroup_FullMethodName        = "/OpenIMChat.admin.admin/DelDefaultGroup"
	Admin_FindDefaultGroup_FullMethodName       = "/OpenIMChat.admin.admin/FindDefaultGroup"
	Admin_SearchDefaultGroup_FullMethodName     = "/OpenIMChat.admin.admin/SearchDefaultGroup"
	Admin_AddInvitationCode_FullMethodName      = "/OpenIMChat.admin.admin/AddInvitationCode"
	Admin_GenInvitationCode_FullMethodName      = "/OpenIMChat.admin.admin/GenInvitationCode"
	Admin_FindInvitationCode_FullMethodName     = "/OpenIMChat.admin.admin/FindInvitationCode"
	Admin_UseInvitationCode_FullMethodName      = "/OpenIMChat.admin.admin/UseInvitationCode"
	Admin_DelInvitationCode_FullMethodName      = "/OpenIMChat.admin.admin/DelInvitationCode"
	Admin_SearchInvitationCode_FullMethodName   = "/OpenIMChat.admin.admin/SearchInvitationCode"
	Admin_SearchUserIPLimitLogin_FullMethodName = "/OpenIMChat.admin.admin/SearchUserIPLimitLogin"
	Admin_AddUserIPLimitLogin_FullMethodName    = "/OpenIMChat.admin.admin/AddUserIPLimitLogin"
	Admin_DelUserIPLimitLogin_FullMethodName    = "/OpenIMChat.admin.admin/DelUserIPLimitLogin"
	Admin_SearchIPForbidden_FullMethodName      = "/OpenIMChat.admin.admin/SearchIPForbidden"
	Admin_AddIPForbidden_FullMethodName         = "/OpenIMChat.admin.admin/AddIPForbidden"
	Admin_DelIPForbidden_FullMethodName         = "/OpenIMChat.admin.admin/DelIPForbidden"
	Admin_CancellationUser_FullMethodName       = "/OpenIMChat.admin.admin/CancellationUser"
	Admin_BlockUser_FullMethodName              = "/OpenIMChat.admin.admin/BlockUser"
	Admin_UnblockUser_FullMethodName            = "/OpenIMChat.admin.admin/UnblockUser"
	Admin_SearchBlockUser_FullMethodName        = "/OpenIMChat.admin.admin/SearchBlockUser"
	Admin_FindUserBlockInfo_FullMethodName      = "/OpenIMChat.admin.admin/FindUserBlockInfo"
	Admin_CheckRegisterForbidden_FullMethodName = "/OpenIMChat.admin.admin/CheckRegisterForbidden"
	Admin_CheckLoginForbidden_FullMethodName    = "/OpenIMChat.admin.admin/CheckLoginForbidden"
	Admin_CreateToken_FullMethodName            = "/OpenIMChat.admin.admin/CreateToken"
	Admin_ParseToken_FullMethodName             = "/OpenIMChat.admin.admin/ParseToken"
	Admin_AddApplet_FullMethodName              = "/OpenIMChat.admin.admin/AddApplet"
	Admin_DelApplet_FullMethodName              = "/OpenIMChat.admin.admin/DelApplet"
	Admin_UpdateApplet_FullMethodName           = "/OpenIMChat.admin.admin/UpdateApplet"
	Admin_FindApplet_FullMethodName             = "/OpenIMChat.admin.admin/FindApplet"
	Admin_SearchApplet_FullMethodName           = "/OpenIMChat.admin.admin/SearchApplet"
	Admin_GetClientConfig_FullMethodName        = "/OpenIMChat.admin.admin/GetClientConfig"
	Admin_SetClientConfig_FullMethodName        = "/OpenIMChat.admin.admin/SetClientConfig"
	Admin_DelClientConfig_FullMethodName        = "/OpenIMChat.admin.admin/DelClientConfig"
	Admin_GetUserToken_FullMethodName           = "/OpenIMChat.admin.admin/GetUserToken"
	Admin_ReportDownload_FullMethodName         = "/OpenIMChat.admin.admin/ReportDownload"
	Admin_GetStatisticInfo_FullMethodName       = "/OpenIMChat.admin.admin/getStatisticInfo"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error)
	// 获取管理员信息
	GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error)
	// 添加 移除 获取  注册时默认好友列表
	AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error)
	DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error)
	FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error)
	AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error)
	DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error)
	FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error)
	// 邀请码 生成 查询 获取
	AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error)
	GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error)
	FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error)
	UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error)
	DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error)
	SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error)
	// 用户登录ip限制 查询 添加 移除
	SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error)
	// 禁止用户在某些ip注册 查询 添加 移除
	SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error)
	AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error)
	DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error)
	// 用户管理相关  添加  封号/解封  拉取
	CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error)
	BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error)
	UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error)
	SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error)
	FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error)
	CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error)
	// 创建token
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error)
	// 解析token
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
	// 小程序
	AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error)
	DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error)
	UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error)
	FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error)
	SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error)
	// 客户端配置
	GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error)
	SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error)
	DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error)
	GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error)
	// 下载上报
	ReportDownload(ctx context.Context, in *ReportDownloadReq, opts ...grpc.CallOption) (*ReportDownloadResp, error)
	// 获取下载统计数据
	GetStatisticInfo(ctx context.Context, in *GetStatisticReq, opts ...grpc.CallOption) (*GetStatisticResp, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Admin_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, Admin_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AdminUpdateInfo(ctx context.Context, in *AdminUpdateInfoReq, opts ...grpc.CallOption) (*AdminUpdateInfoResp, error) {
	out := new(AdminUpdateInfoResp)
	err := c.cc.Invoke(ctx, Admin_AdminUpdateInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAdminInfo(ctx context.Context, in *GetAdminInfoReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error) {
	out := new(GetAdminInfoResp)
	err := c.cc.Invoke(ctx, Admin_GetAdminInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDefaultFriend(ctx context.Context, in *AddDefaultFriendReq, opts ...grpc.CallOption) (*AddDefaultFriendResp, error) {
	out := new(AddDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_AddDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDefaultFriend(ctx context.Context, in *DelDefaultFriendReq, opts ...grpc.CallOption) (*DelDefaultFriendResp, error) {
	out := new(DelDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_DelDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindDefaultFriend(ctx context.Context, in *FindDefaultFriendReq, opts ...grpc.CallOption) (*FindDefaultFriendResp, error) {
	out := new(FindDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_FindDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchDefaultFriend(ctx context.Context, in *SearchDefaultFriendReq, opts ...grpc.CallOption) (*SearchDefaultFriendResp, error) {
	out := new(SearchDefaultFriendResp)
	err := c.cc.Invoke(ctx, Admin_SearchDefaultFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddDefaultGroup(ctx context.Context, in *AddDefaultGroupReq, opts ...grpc.CallOption) (*AddDefaultGroupResp, error) {
	out := new(AddDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_AddDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelDefaultGroup(ctx context.Context, in *DelDefaultGroupReq, opts ...grpc.CallOption) (*DelDefaultGroupResp, error) {
	out := new(DelDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_DelDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindDefaultGroup(ctx context.Context, in *FindDefaultGroupReq, opts ...grpc.CallOption) (*FindDefaultGroupResp, error) {
	out := new(FindDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_FindDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchDefaultGroup(ctx context.Context, in *SearchDefaultGroupReq, opts ...grpc.CallOption) (*SearchDefaultGroupResp, error) {
	out := new(SearchDefaultGroupResp)
	err := c.cc.Invoke(ctx, Admin_SearchDefaultGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddInvitationCode(ctx context.Context, in *AddInvitationCodeReq, opts ...grpc.CallOption) (*AddInvitationCodeResp, error) {
	out := new(AddInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_AddInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenInvitationCode(ctx context.Context, in *GenInvitationCodeReq, opts ...grpc.CallOption) (*GenInvitationCodeResp, error) {
	out := new(GenInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_GenInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindInvitationCode(ctx context.Context, in *FindInvitationCodeReq, opts ...grpc.CallOption) (*FindInvitationCodeResp, error) {
	out := new(FindInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_FindInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UseInvitationCode(ctx context.Context, in *UseInvitationCodeReq, opts ...grpc.CallOption) (*UseInvitationCodeResp, error) {
	out := new(UseInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_UseInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelInvitationCode(ctx context.Context, in *DelInvitationCodeReq, opts ...grpc.CallOption) (*DelInvitationCodeResp, error) {
	out := new(DelInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_DelInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchInvitationCode(ctx context.Context, in *SearchInvitationCodeReq, opts ...grpc.CallOption) (*SearchInvitationCodeResp, error) {
	out := new(SearchInvitationCodeResp)
	err := c.cc.Invoke(ctx, Admin_SearchInvitationCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchUserIPLimitLogin(ctx context.Context, in *SearchUserIPLimitLoginReq, opts ...grpc.CallOption) (*SearchUserIPLimitLoginResp, error) {
	out := new(SearchUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Admin_SearchUserIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddUserIPLimitLogin(ctx context.Context, in *AddUserIPLimitLoginReq, opts ...grpc.CallOption) (*AddUserIPLimitLoginResp, error) {
	out := new(AddUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Admin_AddUserIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelUserIPLimitLogin(ctx context.Context, in *DelUserIPLimitLoginReq, opts ...grpc.CallOption) (*DelUserIPLimitLoginResp, error) {
	out := new(DelUserIPLimitLoginResp)
	err := c.cc.Invoke(ctx, Admin_DelUserIPLimitLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchIPForbidden(ctx context.Context, in *SearchIPForbiddenReq, opts ...grpc.CallOption) (*SearchIPForbiddenResp, error) {
	out := new(SearchIPForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_SearchIPForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddIPForbidden(ctx context.Context, in *AddIPForbiddenReq, opts ...grpc.CallOption) (*AddIPForbiddenResp, error) {
	out := new(AddIPForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_AddIPForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelIPForbidden(ctx context.Context, in *DelIPForbiddenReq, opts ...grpc.CallOption) (*DelIPForbiddenResp, error) {
	out := new(DelIPForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_DelIPForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CancellationUser(ctx context.Context, in *CancellationUserReq, opts ...grpc.CallOption) (*CancellationUserResp, error) {
	out := new(CancellationUserResp)
	err := c.cc.Invoke(ctx, Admin_CancellationUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BlockUser(ctx context.Context, in *BlockUserReq, opts ...grpc.CallOption) (*BlockUserResp, error) {
	out := new(BlockUserResp)
	err := c.cc.Invoke(ctx, Admin_BlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UnblockUser(ctx context.Context, in *UnblockUserReq, opts ...grpc.CallOption) (*UnblockUserResp, error) {
	out := new(UnblockUserResp)
	err := c.cc.Invoke(ctx, Admin_UnblockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchBlockUser(ctx context.Context, in *SearchBlockUserReq, opts ...grpc.CallOption) (*SearchBlockUserResp, error) {
	out := new(SearchBlockUserResp)
	err := c.cc.Invoke(ctx, Admin_SearchBlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindUserBlockInfo(ctx context.Context, in *FindUserBlockInfoReq, opts ...grpc.CallOption) (*FindUserBlockInfoResp, error) {
	out := new(FindUserBlockInfoResp)
	err := c.cc.Invoke(ctx, Admin_FindUserBlockInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CheckRegisterForbidden(ctx context.Context, in *CheckRegisterForbiddenReq, opts ...grpc.CallOption) (*CheckRegisterForbiddenResp, error) {
	out := new(CheckRegisterForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_CheckRegisterForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CheckLoginForbidden(ctx context.Context, in *CheckLoginForbiddenReq, opts ...grpc.CallOption) (*CheckLoginForbiddenResp, error) {
	out := new(CheckLoginForbiddenResp)
	err := c.cc.Invoke(ctx, Admin_CheckLoginForbidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error) {
	out := new(CreateTokenResp)
	err := c.cc.Invoke(ctx, Admin_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	out := new(ParseTokenResp)
	err := c.cc.Invoke(ctx, Admin_ParseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddApplet(ctx context.Context, in *AddAppletReq, opts ...grpc.CallOption) (*AddAppletResp, error) {
	out := new(AddAppletResp)
	err := c.cc.Invoke(ctx, Admin_AddApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelApplet(ctx context.Context, in *DelAppletReq, opts ...grpc.CallOption) (*DelAppletResp, error) {
	out := new(DelAppletResp)
	err := c.cc.Invoke(ctx, Admin_DelApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateApplet(ctx context.Context, in *UpdateAppletReq, opts ...grpc.CallOption) (*UpdateAppletResp, error) {
	out := new(UpdateAppletResp)
	err := c.cc.Invoke(ctx, Admin_UpdateApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) FindApplet(ctx context.Context, in *FindAppletReq, opts ...grpc.CallOption) (*FindAppletResp, error) {
	out := new(FindAppletResp)
	err := c.cc.Invoke(ctx, Admin_FindApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchApplet(ctx context.Context, in *SearchAppletReq, opts ...grpc.CallOption) (*SearchAppletResp, error) {
	out := new(SearchAppletResp)
	err := c.cc.Invoke(ctx, Admin_SearchApplet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetClientConfig(ctx context.Context, in *GetClientConfigReq, opts ...grpc.CallOption) (*GetClientConfigResp, error) {
	out := new(GetClientConfigResp)
	err := c.cc.Invoke(ctx, Admin_GetClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetClientConfig(ctx context.Context, in *SetClientConfigReq, opts ...grpc.CallOption) (*SetClientConfigResp, error) {
	out := new(SetClientConfigResp)
	err := c.cc.Invoke(ctx, Admin_SetClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelClientConfig(ctx context.Context, in *DelClientConfigReq, opts ...grpc.CallOption) (*DelClientConfigResp, error) {
	out := new(DelClientConfigResp)
	err := c.cc.Invoke(ctx, Admin_DelClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserToken(ctx context.Context, in *GetUserTokenReq, opts ...grpc.CallOption) (*GetUserTokenResp, error) {
	out := new(GetUserTokenResp)
	err := c.cc.Invoke(ctx, Admin_GetUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ReportDownload(ctx context.Context, in *ReportDownloadReq, opts ...grpc.CallOption) (*ReportDownloadResp, error) {
	out := new(ReportDownloadResp)
	err := c.cc.Invoke(ctx, Admin_ReportDownload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetStatisticInfo(ctx context.Context, in *GetStatisticReq, opts ...grpc.CallOption) (*GetStatisticResp, error) {
	out := new(GetStatisticResp)
	err := c.cc.Invoke(ctx, Admin_GetStatisticInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error)
	// 获取管理员信息
	GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error)
	// 添加 移除 获取  注册时默认好友列表
	AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error)
	DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error)
	FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error)
	SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error)
	AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error)
	DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error)
	FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error)
	SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error)
	// 邀请码 生成 查询 获取
	AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error)
	GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error)
	FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error)
	UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error)
	DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error)
	SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error)
	// 用户登录ip限制 查询 添加 移除
	SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error)
	AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error)
	DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error)
	// 禁止用户在某些ip注册 查询 添加 移除
	SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error)
	AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error)
	DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error)
	// 用户管理相关  添加  封号/解封  拉取
	CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error)
	BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error)
	UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error)
	SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error)
	FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error)
	CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error)
	CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error)
	// 创建token
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error)
	// 解析token
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
	// 小程序
	AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error)
	DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error)
	UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error)
	FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error)
	SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error)
	// 客户端配置
	GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error)
	SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error)
	DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error)
	GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error)
	// 下载上报
	ReportDownload(context.Context, *ReportDownloadReq) (*ReportDownloadResp, error)
	// 获取下载统计数据
	GetStatisticInfo(context.Context, *GetStatisticReq) (*GetStatisticResp, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAdminServer) AdminUpdateInfo(context.Context, *AdminUpdateInfoReq) (*AdminUpdateInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateInfo not implemented")
}
func (UnimplementedAdminServer) GetAdminInfo(context.Context, *GetAdminInfoReq) (*GetAdminInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminInfo not implemented")
}
func (UnimplementedAdminServer) AddDefaultFriend(context.Context, *AddDefaultFriendReq) (*AddDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultFriend not implemented")
}
func (UnimplementedAdminServer) DelDefaultFriend(context.Context, *DelDefaultFriendReq) (*DelDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultFriend not implemented")
}
func (UnimplementedAdminServer) FindDefaultFriend(context.Context, *FindDefaultFriendReq) (*FindDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultFriend not implemented")
}
func (UnimplementedAdminServer) SearchDefaultFriend(context.Context, *SearchDefaultFriendReq) (*SearchDefaultFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultFriend not implemented")
}
func (UnimplementedAdminServer) AddDefaultGroup(context.Context, *AddDefaultGroupReq) (*AddDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDefaultGroup not implemented")
}
func (UnimplementedAdminServer) DelDefaultGroup(context.Context, *DelDefaultGroupReq) (*DelDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDefaultGroup not implemented")
}
func (UnimplementedAdminServer) FindDefaultGroup(context.Context, *FindDefaultGroupReq) (*FindDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefaultGroup not implemented")
}
func (UnimplementedAdminServer) SearchDefaultGroup(context.Context, *SearchDefaultGroupReq) (*SearchDefaultGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDefaultGroup not implemented")
}
func (UnimplementedAdminServer) AddInvitationCode(context.Context, *AddInvitationCodeReq) (*AddInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvitationCode not implemented")
}
func (UnimplementedAdminServer) GenInvitationCode(context.Context, *GenInvitationCodeReq) (*GenInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenInvitationCode not implemented")
}
func (UnimplementedAdminServer) FindInvitationCode(context.Context, *FindInvitationCodeReq) (*FindInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInvitationCode not implemented")
}
func (UnimplementedAdminServer) UseInvitationCode(context.Context, *UseInvitationCodeReq) (*UseInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseInvitationCode not implemented")
}
func (UnimplementedAdminServer) DelInvitationCode(context.Context, *DelInvitationCodeReq) (*DelInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelInvitationCode not implemented")
}
func (UnimplementedAdminServer) SearchInvitationCode(context.Context, *SearchInvitationCodeReq) (*SearchInvitationCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInvitationCode not implemented")
}
func (UnimplementedAdminServer) SearchUserIPLimitLogin(context.Context, *SearchUserIPLimitLoginReq) (*SearchUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserIPLimitLogin not implemented")
}
func (UnimplementedAdminServer) AddUserIPLimitLogin(context.Context, *AddUserIPLimitLoginReq) (*AddUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserIPLimitLogin not implemented")
}
func (UnimplementedAdminServer) DelUserIPLimitLogin(context.Context, *DelUserIPLimitLoginReq) (*DelUserIPLimitLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserIPLimitLogin not implemented")
}
func (UnimplementedAdminServer) SearchIPForbidden(context.Context, *SearchIPForbiddenReq) (*SearchIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchIPForbidden not implemented")
}
func (UnimplementedAdminServer) AddIPForbidden(context.Context, *AddIPForbiddenReq) (*AddIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPForbidden not implemented")
}
func (UnimplementedAdminServer) DelIPForbidden(context.Context, *DelIPForbiddenReq) (*DelIPForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIPForbidden not implemented")
}
func (UnimplementedAdminServer) CancellationUser(context.Context, *CancellationUserReq) (*CancellationUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancellationUser not implemented")
}
func (UnimplementedAdminServer) BlockUser(context.Context, *BlockUserReq) (*BlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedAdminServer) UnblockUser(context.Context, *UnblockUserReq) (*UnblockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (UnimplementedAdminServer) SearchBlockUser(context.Context, *SearchBlockUserReq) (*SearchBlockUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlockUser not implemented")
}
func (UnimplementedAdminServer) FindUserBlockInfo(context.Context, *FindUserBlockInfoReq) (*FindUserBlockInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserBlockInfo not implemented")
}
func (UnimplementedAdminServer) CheckRegisterForbidden(context.Context, *CheckRegisterForbiddenReq) (*CheckRegisterForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegisterForbidden not implemented")
}
func (UnimplementedAdminServer) CheckLoginForbidden(context.Context, *CheckLoginForbiddenReq) (*CheckLoginForbiddenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoginForbidden not implemented")
}
func (UnimplementedAdminServer) CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedAdminServer) ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedAdminServer) AddApplet(context.Context, *AddAppletReq) (*AddAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplet not implemented")
}
func (UnimplementedAdminServer) DelApplet(context.Context, *DelAppletReq) (*DelAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelApplet not implemented")
}
func (UnimplementedAdminServer) UpdateApplet(context.Context, *UpdateAppletReq) (*UpdateAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplet not implemented")
}
func (UnimplementedAdminServer) FindApplet(context.Context, *FindAppletReq) (*FindAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApplet not implemented")
}
func (UnimplementedAdminServer) SearchApplet(context.Context, *SearchAppletReq) (*SearchAppletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApplet not implemented")
}
func (UnimplementedAdminServer) GetClientConfig(context.Context, *GetClientConfigReq) (*GetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (UnimplementedAdminServer) SetClientConfig(context.Context, *SetClientConfigReq) (*SetClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientConfig not implemented")
}
func (UnimplementedAdminServer) DelClientConfig(context.Context, *DelClientConfigReq) (*DelClientConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClientConfig not implemented")
}
func (UnimplementedAdminServer) GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedAdminServer) ReportDownload(context.Context, *ReportDownloadReq) (*ReportDownloadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDownload not implemented")
}
func (UnimplementedAdminServer) GetStatisticInfo(context.Context, *GetStatisticReq) (*GetStatisticResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticInfo not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AdminUpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AdminUpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AdminUpdateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AdminUpdateInfo(ctx, req.(*AdminUpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdminInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminInfo(ctx, req.(*GetAdminInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDefaultFriend(ctx, req.(*AddDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDefaultFriend(ctx, req.(*DelDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindDefaultFriend(ctx, req.(*FindDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchDefaultFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchDefaultFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchDefaultFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchDefaultFriend(ctx, req.(*SearchDefaultFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddDefaultGroup(ctx, req.(*AddDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelDefaultGroup(ctx, req.(*DelDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindDefaultGroup(ctx, req.(*FindDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchDefaultGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDefaultGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchDefaultGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchDefaultGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchDefaultGroup(ctx, req.(*SearchDefaultGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddInvitationCode(ctx, req.(*AddInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GenInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenInvitationCode(ctx, req.(*GenInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindInvitationCode(ctx, req.(*FindInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UseInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UseInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UseInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UseInvitationCode(ctx, req.(*UseInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelInvitationCode(ctx, req.(*DelInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInvitationCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchInvitationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchInvitationCode(ctx, req.(*SearchInvitationCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchUserIPLimitLogin(ctx, req.(*SearchUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddUserIPLimitLogin(ctx, req.(*AddUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelUserIPLimitLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserIPLimitLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelUserIPLimitLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelUserIPLimitLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelUserIPLimitLogin(ctx, req.(*DelUserIPLimitLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchIPForbidden(ctx, req.(*SearchIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddIPForbidden(ctx, req.(*AddIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelIPForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelIPForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelIPForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelIPForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelIPForbidden(ctx, req.(*DelIPForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CancellationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellationUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CancellationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CancellationUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CancellationUser(ctx, req.(*CancellationUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BlockUser(ctx, req.(*BlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UnblockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UnblockUser(ctx, req.(*UnblockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchBlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlockUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchBlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchBlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchBlockUser(ctx, req.(*SearchBlockUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindUserBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserBlockInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindUserBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindUserBlockInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindUserBlockInfo(ctx, req.(*FindUserBlockInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CheckRegisterForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRegisterForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckRegisterForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CheckRegisterForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckRegisterForbidden(ctx, req.(*CheckRegisterForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CheckLoginForbidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoginForbiddenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CheckLoginForbidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CheckLoginForbidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CheckLoginForbidden(ctx, req.(*CheckLoginForbiddenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ParseToken(ctx, req.(*ParseTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_AddApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddApplet(ctx, req.(*AddAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelApplet(ctx, req.(*DelAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_UpdateApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateApplet(ctx, req.(*UpdateAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_FindApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).FindApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_FindApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).FindApplet(ctx, req.(*FindAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchApplet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchApplet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchApplet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchApplet(ctx, req.(*SearchAppletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetClientConfig(ctx, req.(*GetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetClientConfig(ctx, req.(*SetClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelClientConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DelClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelClientConfig(ctx, req.(*DelClientConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserToken(ctx, req.(*GetUserTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ReportDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ReportDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ReportDownload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ReportDownload(ctx, req.(*ReportDownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetStatisticInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetStatisticInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetStatisticInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetStatisticInfo(ctx, req.(*GetStatisticReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpenIMChat.admin.admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Admin_ChangePassword_Handler,
		},
		{
			MethodName: "AdminUpdateInfo",
			Handler:    _Admin_AdminUpdateInfo_Handler,
		},
		{
			MethodName: "GetAdminInfo",
			Handler:    _Admin_GetAdminInfo_Handler,
		},
		{
			MethodName: "AddDefaultFriend",
			Handler:    _Admin_AddDefaultFriend_Handler,
		},
		{
			MethodName: "DelDefaultFriend",
			Handler:    _Admin_DelDefaultFriend_Handler,
		},
		{
			MethodName: "FindDefaultFriend",
			Handler:    _Admin_FindDefaultFriend_Handler,
		},
		{
			MethodName: "SearchDefaultFriend",
			Handler:    _Admin_SearchDefaultFriend_Handler,
		},
		{
			MethodName: "AddDefaultGroup",
			Handler:    _Admin_AddDefaultGroup_Handler,
		},
		{
			MethodName: "DelDefaultGroup",
			Handler:    _Admin_DelDefaultGroup_Handler,
		},
		{
			MethodName: "FindDefaultGroup",
			Handler:    _Admin_FindDefaultGroup_Handler,
		},
		{
			MethodName: "SearchDefaultGroup",
			Handler:    _Admin_SearchDefaultGroup_Handler,
		},
		{
			MethodName: "AddInvitationCode",
			Handler:    _Admin_AddInvitationCode_Handler,
		},
		{
			MethodName: "GenInvitationCode",
			Handler:    _Admin_GenInvitationCode_Handler,
		},
		{
			MethodName: "FindInvitationCode",
			Handler:    _Admin_FindInvitationCode_Handler,
		},
		{
			MethodName: "UseInvitationCode",
			Handler:    _Admin_UseInvitationCode_Handler,
		},
		{
			MethodName: "DelInvitationCode",
			Handler:    _Admin_DelInvitationCode_Handler,
		},
		{
			MethodName: "SearchInvitationCode",
			Handler:    _Admin_SearchInvitationCode_Handler,
		},
		{
			MethodName: "SearchUserIPLimitLogin",
			Handler:    _Admin_SearchUserIPLimitLogin_Handler,
		},
		{
			MethodName: "AddUserIPLimitLogin",
			Handler:    _Admin_AddUserIPLimitLogin_Handler,
		},
		{
			MethodName: "DelUserIPLimitLogin",
			Handler:    _Admin_DelUserIPLimitLogin_Handler,
		},
		{
			MethodName: "SearchIPForbidden",
			Handler:    _Admin_SearchIPForbidden_Handler,
		},
		{
			MethodName: "AddIPForbidden",
			Handler:    _Admin_AddIPForbidden_Handler,
		},
		{
			MethodName: "DelIPForbidden",
			Handler:    _Admin_DelIPForbidden_Handler,
		},
		{
			MethodName: "CancellationUser",
			Handler:    _Admin_CancellationUser_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _Admin_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Admin_UnblockUser_Handler,
		},
		{
			MethodName: "SearchBlockUser",
			Handler:    _Admin_SearchBlockUser_Handler,
		},
		{
			MethodName: "FindUserBlockInfo",
			Handler:    _Admin_FindUserBlockInfo_Handler,
		},
		{
			MethodName: "CheckRegisterForbidden",
			Handler:    _Admin_CheckRegisterForbidden_Handler,
		},
		{
			MethodName: "CheckLoginForbidden",
			Handler:    _Admin_CheckLoginForbidden_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Admin_CreateToken_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Admin_ParseToken_Handler,
		},
		{
			MethodName: "AddApplet",
			Handler:    _Admin_AddApplet_Handler,
		},
		{
			MethodName: "DelApplet",
			Handler:    _Admin_DelApplet_Handler,
		},
		{
			MethodName: "UpdateApplet",
			Handler:    _Admin_UpdateApplet_Handler,
		},
		{
			MethodName: "FindApplet",
			Handler:    _Admin_FindApplet_Handler,
		},
		{
			MethodName: "SearchApplet",
			Handler:    _Admin_SearchApplet_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _Admin_GetClientConfig_Handler,
		},
		{
			MethodName: "SetClientConfig",
			Handler:    _Admin_SetClientConfig_Handler,
		},
		{
			MethodName: "DelClientConfig",
			Handler:    _Admin_DelClientConfig_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Admin_GetUserToken_Handler,
		},
		{
			MethodName: "ReportDownload",
			Handler:    _Admin_ReportDownload_Handler,
		},
		{
			MethodName: "getStatisticInfo",
			Handler:    _Admin_GetStatisticInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/admin/admin.proto",
}
